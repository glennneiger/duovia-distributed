Sprint 4:

        private static void DoTenUrlsThreeTimesEachAroundTheWorldInParallel(bool runLocal = false)
        {
            var serverEndpoints = new IPEndPoint[0];
            if (runLocal)
            {
                serverEndpoints = new IPEndPoint[] { new IPEndPoint(IPAddress.Parse("127.0.0.1"), 9096) };
            }
            else
            {
                //these server names are temporary - to run this test use your own
                var servers = new string[]
                {
                    "tsa65westus.cloudapp.net",
                    "tsa65eastus.cloudapp.net",
                    "tsa65northeu.cloudapp.net",
                    "tsa65westeu.cloudapp.net",
                    "tsa65soeastasia.cloudapp.net",
                    "tsa65eastasia.cloudapp.net"
                };

                serverEndpoints = new IPEndPoint[servers.Length];
                for (int i = 0; i < servers.Length; i++)
                {
                    var host = Dns.GetHostAddresses(servers[i]);
                    var ip = (from n in host where n.AddressFamily == AddressFamily.InterNetwork select n).First();
                    serverEndpoints[i] = new IPEndPoint(ip, 9096);
                }
            }

            float subscriptionRate = 2.0f; //oversubscribed 
            int logPollingIntervalSeconds = 2;
            using (DistributedClient<ISpeedTest> client = Distributor.Connect<ISpeedTest>(typeof(SpeedTest),
                subscriptionRate,
                logPollingIntervalSeconds,
                LogLevel.Debug,
                serverEndpoints))
            {
                for (int i = 0; i < 3; i++)
                {
                    var sw = Stopwatch.StartNew();
                    Console.WriteLine(@"round:{0}", i + 1);
                    var loopResult = client.ForEach(TestUrls, (url, proxy) => proxy.GetSpeed(url));
                    foreach (var result in loopResult.Results)
                    {
                        Console.WriteLine(@"r:{0}, s:{1}, b:{2}, on: {3}, u:{4}",
                            result.ResponseTimeMs, result.ReadStreamTimeMs, result.ResponseLength, result.MachineName, result.Url);
                    }
                    sw.Stop();
                    Console.WriteLine("Total elapsed time: {0}", sw.ElapsedMilliseconds);
                    Console.WriteLine(string.Empty);
                }
            }
        }
